def oldBackend
def newBackend

def removeDockerContents(String name) {
    sh script: """
    if [ \$(docker ps -a -q -f name=${name}) ]; then
        docker stop ${name}
    fi
    if [ \$(docker ps -aq -f status=exited -f name=${name}) ]; then
        docker rm ${name}
    fi
    docker image prune -f
    """, label: 'Removing Docker contents'
}

pipeline {
    agent any

     tools {
        jdk "jdk 21"
    }
    
    environment {
        JAVA_HOME = "tool jdk 21"
    }

    stages {
        stage('Get current backend') {
            steps {
                script {
                    echo 'Get current backend...'
                    oldBackend = sh(script: """docker exec nginx grep "set \\\$current_backend" /etc/nginx/conf.d/custom.conf | awk -F '[ \\t]+' '{print \$4}' | tr -d ';'""", returnStdout: true).trim()
                    
                    if(oldBackend == 'backend-blue') {
                        newBackend = 'backend-green'
                    } else if(oldBackend == 'backend-green') {
                        newBackend = 'backend-blue'
                    } else {
                        currentBuild.result = 'FAILURE'
                        error('Get current backend fail')
                    }
                }
            }

            post {
                always {
                    echo "Current Backend: ${oldBackend}"
                }
                success {
                    echo "Get backend success"
                    updateGitlabCommitStatus name: 'check', state: 'success'
                }
                failure {
                    echo "Get backend failed"
                    updateGitlabCommitStatus name: 'check', state: 'failed'
                }
            }
        }

        stage('Copy env') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'application_yaml', variable: 'application')]) {
                        script {
                            sh 'chmod 755 $application'
                            sh 'cp -f -R $application back/src/main/resources/application.yml'
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo 'Build gradle...'
                    dir('back') {
                        sh "chmod +x ./gradlew"
                        sh "./gradlew clean build -x check --parallel"
                    }

                    echo 'Docker build...'
                    sh "docker build --build-arg JAR_FILE=back/build/libs/omess-0.0.1-SNAPSHOT.jar -f ./docker/back-docker -t ${newBackend} ."
                }
            }

            post {
                success {
                    echo "Build success"
                    updateGitlabCommitStatus name: 'build', state: 'success'
                }
                failure {
                    echo "Build failed"
                    updateGitlabCommitStatus name: 'build', state: 'failed'
                }
            }
        }

        stage('Run') {
            steps {
                script {
                    echo 'Docker run...'
		            sh "docker run -d --net omess --name ${newBackend} ${newBackend}"
                }
            }

            post {
                success {
                    echo "Run success"
                    updateGitlabCommitStatus name: 'run', state: 'success'
                }
                failure {
                    echo "Run failed"
                    updateGitlabCommitStatus name: 'run', state: 'failed'
                }
            }
        }

        stage('Health check') {
            steps{
                script {
                    sleep 10
                    def status = sh(script: "curl -s -o /dev/null -I -w \"%{http_code}\" http://${newBackend}:8080/actuator/health", returnStdout: true).trim()

                    if(status != '200') {
                        currentBuild.result = 'FAILURE'
                        error('Health check fail')
                    }
                }
            }

            post {
                success {
                    echo "Health check success"
                    updateGitlabCommitStatus name: 'healthcheck', state: 'success'
                }
                failure {
                    echo "Health check failed"

                    //removeDockerContents(newBackend)

                    updateGitlabCommitStatus name: 'healthcheck', state: 'failed'
                }
            }
        }

        stage('Update backend') {
            steps{
                script {
                    echo 'Update nginx conf...'

                    sh "docker exec nginx sed -i 's/set \$current_backend ${oldBackend};/set \$current_backend ${newBackend};/g' /etc/nginx/conf.d/custom.conf"
                    sh 'docker exec nginx nginx -s reload'
                
                    removeDockerContents(oldBackend)
                }
            }

            post {
                success {
                    echo "Update success"
                    updateGitlabCommitStatus name: 'update', state: 'success'
                }
                failure {
                    echo "Update failed"
                    removeDockerContents(newBackend)
                    updateGitlabCommitStatus name: '', state: 'failed'
                }
            }
        }
    }
}
